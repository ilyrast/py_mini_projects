# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


from mastermind_engine import check_number
from mastermind_engine import same_in_list
from mastermind_engine import gameover
from mastermind_engine import rand_number

inp_num_list = []

while True:
    rand_number()
    step_counter = 0
    inp_num_list.clear()
    while True:
        # TODO, запрос ввода пользователя и проверку числа предлагаю реализовать отдельной функцией,
        #  для сокращения количества кода в этом цикле.
        number = input('Введите вариант числа:')
        if len(number) != 4:
            print('Число должно быть четырехзначным')
        elif number.isdigit() == False:  # TODO, лучше "elif not ..." вместо "== False"
            print('Неправильный формат ввода')
        # TODO, возможно, будет проще проверять длину number? условие получится чуть короче =)
        elif (1000 <= int(number) <= 9999) == False:
            print('Первым не должен быть 0')
        else:
            # TODO, возможно стоит просто проверять длину множества?)
            #  В таком случае, строка кода будет 1 =)
            inp_num_list.append(int(number) // 1000)
            inp_num_list.append(int(number) // 100 - int(number) // 1000 * 10)
            inp_num_list.append(int(number) // 10 - int(number) // 100 * 10)
            inp_num_list.append(int(number) - int(number) // 10 * 10)
            if same_in_list(list_1=inp_num_list, list_2=inp_num_list) != 0:
                print('Все цифры должны быть разные')
                inp_num_list.clear()
            else:
                # TODO, предлагаю сократить количество вызово функции check_number до 1, присвоим её возврат переменным =)
                print(
                    'быки -', check_number(input_list=inp_num_list)[0],
                    'коровы -', check_number(input_list=inp_num_list)[1]
                     )
                step_counter += 1
                if gameover(bulls=check_number(input_list=inp_num_list)[0]) == True:
                    print("Количество ходов до победы:", step_counter)
                    print("Хотите еще партию? (y/n)")
                    if input() == 'y':
                        break
                    else:
                        quit()
                else:
                    inp_num_list.clear()



